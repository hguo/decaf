#ifndef __FVNANO_DATA__
#define __FVNANO_DATA__

#define SPHERENAMEMAXSIZE 256 


typedef struct 
{
	unsigned index;
	float x;
	float y;
	float z;
} indexedpositiontype;


typedef struct 
{
	unsigned index;
	float fx;
	float fy;
	float fz;
} indexedforcetype;


typedef struct 
{
	float x;
	float y;
	float z;
} positiontype;


typedef  struct 
{
	float red;
	float green;
	float blue;
	float alpha;
} colortype;

typedef struct 
{
	unsigned id;
 	//positiontype position;
 	colortype color;
	float radius;
	float scale;
    char chain;
    char residue_name[3]; // The residue name, without '\0'
    unsigned short int residue_id;
    char name[4]; // The atom name, without '\0'
} spheretype;

typedef struct
{
    unsigned size;
    spheretype * table;
} tab_spheretype;

typedef struct 
{
	unsigned id;
	unsigned idsrc;
	unsigned iddest;
// 	colortype color;
	//float radius;
	float shrink;
	float scale;	
} cylindertype;

typedef struct
{
	float Xmin;
	float Ymin;
	float Zmin;
	float Xmax;
	float Ymax;
	float Zmax;
}BBoxtype;

typedef struct
{
    int atomID;
    float posX;
    float posY;
    float posZ;
} idPositionType;

typedef struct
{
    unsigned int it;		//Iteration when the force was apply
    int ForceID;            //ForceID generated by the forcegenerator
    unsigned int atomID;	//AtomeID on which was apply the force
    float Px;               //Position X of the atome
    float Py;               //Position Y of the atome
    float Pz;               //Position Z of the atome
    float Fx;               //Force X
    float Fy;               //Force Y
    float Fz;               //Force Z
} forceHistoryType;		

enum targetType {
    ABS = 0,
    REL
};

#define MAX_SIZE_REQUEST 2048
typedef struct
{
    int type;                   //Target absolute in space or relative to a reference point
    float target[3];            //Coordonates of the absolute target
    char targetRequest[2048];   //Request of the
}Target;

typedef struct
{
    int nbTargets;                      //Total number of targets to reach
    int currentTarget;                  //Current active target
    float currentTargetPosition[3];     //Current position of the target
    float currentSelectionPosition[3];  //Current position of the selection
    float distanceToTarget;             //Current distance to reach the target
    float currentSpeed;                 //Current speed of the selection
    float timeToTarget;                 //Estimated time until the selection reaches the target
} stateTargeting;

typedef struct
{
    unsigned int first;
    unsigned int second;
} unsignedPair;

#define GRIDSPACE 1.0  //Gridspace to 1 Angstrom

#endif
